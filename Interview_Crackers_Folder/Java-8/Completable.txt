** Completable future:-

  1 Introduction
  2 CompletionStage
  3 Future vs. CompletableFuture
  4 Limitations of the Future
  5 CREATION:
  6 METHODS
  7 PROGRAM  
________________________________
**  A CompletableFuture is a class in Java. It belongs to java.util.cocurrent package. It implements
    CompletionStage and Future interface.
 *  A CompltableFuture is used for asynchronous programming. Asynchronous programming means writing non-blocking 
    code. It runs a task on a separate thread than the main application thread and notifies the main thread about
 	its progress, completion or failure.
 *  In this way, the main thread does not block or wait for the completion of the task. Other tasks execute 
    in parallel. Parallelism improves the performance of the program.

  *****CompletionStage*****
  ________________________________
 *  It performs an action and returns a value when another completion stage completes.
 *  A model for a task that may trigger other tasks.
 *  Hence, it is an element of a chain.
 *  When more than one thread attempt to complete - complete exceptionally or cancel a CompletableFuture, 
 *  only one of them succeeds.	
 
***** Future vs. CompletableFuture*****
______________________________________________
 *  A CompletableFuture is an extension to Java's Future API which was introduced in Java 8.
 *  A Future is used for asynchronous Programming. It provides two methods, isDone() and get(). The methods
    retrieve the result of the computation when it completes.
	
***** Limitations of the Future *****
_____________________________________________
 *  A Future cannot be mutually complete.
 *  We cannot perform further action on a Future's result without blocking.
 *  Future has not any exception handling.
 *  We cannot combine multiple futures.
 NOTE:- Future has so many limitations, that's why we have CompletableFuture. CompletableFuture provides a broad
    set of methods for creating multiple Futures, chaining, and combining. It also has comprehensive exception 
	handling support.
	
**********CREATION:-**********
 *  We can create a CompletableFuture only by using the following no-argument constructor.

   CompletableFuture<String> CompletableFuture = new CompletableFuture<String>();	
   
******METHODS:-******
 *  supplyAsync(): It complete its job asynchronously. The result of supplier is run by a task from ForkJoinPool.
    monPool() as default. The supplyAsync() method returns CompletableFuture on which we can apply other methods.
 *  join(): the method returns the result value when complete. It also throws a CompletionException
    (unchecked exception) if completed exceptionally.

*****PROGRAM:-*****

  public class CompletableFutureExample1   
{  
public static void main(String[] args)   
{  
try  
{  
List<Integer> list = Arrays.asList(5,9,14);  
list.stream().map(num->CompletableFuture.supplyAsync(()->getNumber(num))).map(CompletableFuture->CompletableFuture.thenApply(n-  
>n*n)).map(t->t.join()).forEach(s->System.out.println(s));  
}  
catch (Exception e)  
{  
e.printStackTrace();  
}  
}  
private static int getNumber(int a)  
{  
return a*a;  
}  
}  O/p:- 625,6561,38416	
   
   
   
   
   
   
   
   
   
   
	