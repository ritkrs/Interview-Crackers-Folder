** What is the differences between Java.util.streams and Java.io streams? 
____________________________________________________________________________________________

** Java.util streams meant for processing objects from the collection. Ie, it represents a stream of objects 
   from the collection but Java.io streams meant for processing binary and character data with respect to 
   file.  i.e it represents stream of binary data or character data from the file .hence  Java.io streams and 
   Java.util streams both are different. 
   
** What is the difference between collection and stream?  
____________________________________________________________________________________________
** If we want to represent a group of individual objects as a single entity then We should go for collection. 
** If we want to process a group of objects from the collection then we should go for streams. 
** We can create a stream object to the collection by using stream() method of Collection interface.   
        stream() method is a default method added to the Collection in 1.8 version. 
		          
				  default Stream stream() 
				  Ex: Stream s = c.stream(); 
				  
** Stream is an interface present in java.util.stream. Once we got the stream, by using that we can process objects of that collection. 
__________________________________________________________________________________________________________________________________________
** We can process the objects in the following 2 phases 
    1.Configuration 
	2.Processing 		
  
** 1) Configuration: -
_________________________
** We can configure either by using filter mechanism or by using map mechanism. 

     Filtering: -
	_____________
** We can configure a filter to filter elements from the collection based on some boolean condition by  	
    using filter()method of Stream interface.
	public Stream filter(Predicate<T> t) 
    here (Predicate<T > t ) can be  a boolean valued function/lambda expression.
	
	
     Mapping:-
	_________
** If we want to create a separate new object, for every object present in the collection based
     on our requirement then we should go for map() method of Stream interface. 	
** Once we performed configuration we can process objects by using several methods.

** 2) Processing:-
__________________	
processing by collect() method  
Processing by count()method 
Processing by sorted()method
Processing by min() and max() methods
forEach() method 
toArray() method Stream.of()method 

** Processing by collect() method:-
___________________________________
** This method collects the elements from the stream and adding to the specified to the collection indicated (specified) by argument. 
   Eg:-
    ArrayList<Integer> l1 = new ArrayList<Integer>();
    for(int i=0; i<=10; i++) {                
	l1.add(i);  }   
	System.out.println(l1);
	List<Integer> l2 = l1.stream().filter(i -> i%2==0).collect(Collectors.toList());   
	System.out.println(l2);

** II.Processing by count()method 
________________________________________
** This method returns number of elements present in the stream. 
   public long count()
   Eg:-  long count = l.stream().filter(s ->s.length()==5).count(); 
      sop(“The number of 5 length strings is:”+count);
	  
** II.Processing by sorted()method
________________________________________	  
** If we sort the elements present inside stream then we should go for sorted() method. 
** The sorting can either default natural sorting order or customized sorting order specified by comparator. 
** sorted()- default natural sorting order 
** sorted(Comparator c)-customized sorting order. 
   
   Ex: List<String> l3=l.stream().sorted().collect(Collectors.toList());
   sop(“according to default natural sorting order:”+l3);

   List<String> l4=l.stream().sorted((s1,s2) -> -s1.compareTo(s2)).collect(Collectors.toList()); 
   sop(“according to customized sorting order:”+l4); 

**  II.Processing by sorted()method
________________________________________	
** This method will not return anything.
** This method will take lambda expression as argument and apply that lambda expression for each element present in the stream. 
   Ex: l.stream().forEach(s->sop(s));
   l3.stream().forEach(System.out:: println); 

**  II.toArray() method
____________________________
** We can use toArray() method to copy elements present in the stream into specified array.
   Integer[] ir = l1.stream().toArray(Integer[] :: new); 
   for(Integer i: ir) { 
   sop(i); }
   
**  II.Stream.of()method:-
__________________________
** We can also apply a stream for group of values and for arrays.
   Ex: -
   Stream s=Stream.of(99,999,9999,99999); 
   s.forEach(System.out:: println); 
   Double[] d={10.0,10.1,10.2,10.3}; 
   Stream s1=Stream.of(d); 
   s1.forEach(System.out :: println); 
  
** Write a program to check the given year is leap year or not:-
___________________________________________________________________
**  public class Leapyear {   
    int n = Integer.parseInt(args[0]);  
	Year y = Year.of(n);
	if(y.isLeap())  
	System.out.printf("%d is Leap year",n);
	else  
	System.out.printf("%d is not Leap year",n); 
	}
	
** INTERVIEW QUESTIONS:-
__________________________________________
** Different operations on stream:-
__________________________________________	
** Intermediate Operations:-
__________________________________________
** Map()- If we want to create a seperate new object, for every object present in the collection based on our 
   requirement then we should go for map() of stream interface.
   Eg:1- Stream s=c.stream();
        Stream s1=s.map();
		
   Eg:2 - List number=Arrays.asList(2,3,4,5);
   List square=number.stream.map(x -> x*x).collect(Collections.toList());
   
** 2). filter() - We can configure filter to filter elements from the collection based on some boolean condition
   by using filter() method of stream interface.
   
   Sign :- public Stream filter(Predicate<T> t)
   Eg:1 - List names=Arrays.list("Reflection","Collection","Stream"); 
   List result=names.stream.filter(s -> s.startsWith("s")).collect((Collectors.toList());   
   
** 3). Sorted is used to sort the element().
   List names=Arrays.asList("Reflection","Collection",Stream);
   List results= names.stream().sorted().collect(Collectors.toList());

** Terminal Operations:-
____________________________

CREATE TABLE address (id int NOT NULL, house_no varchar(90),city varchar(90),PRIMARY KEY (id),FOREIGN KEY (PersonID) REFERENCES Persons(PersonID));
    
   CREATE TABLE CUSTOMERS(ID   INT NOT NULL,NAME VARCHAR (20) NOT NULL,AGE  INT NOT NULL,ADDRESS  CHAR (25) ,SALARY   DECIMAL (18, 2),PRIMARY KEY (ID) );
   
   
   
   
          
   PRIMARY KEY (ID)

    
    
    

























   
   
      


























	
   
   

	  
	  
 
 
	
	
	
	
	
	
	
	
	
	
	