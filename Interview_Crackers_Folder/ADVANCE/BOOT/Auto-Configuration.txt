1  SPRING AUTO CONFIGURATION:-
_________________________________

**  Spring Boot auto-configuration automatically configures the Spring application based on the jar
       dependencies that we have added.
**  For example, if the H2 database Jar is present in the classpath and we have not configured any beans related to
    the database manually, the Spring Boot's auto-configuration feature automatically configures it in the project.
**  We can enable the auto-configuration feature by using the annotation @EnableAutoConfiguration. But this annotation
      does not use because it is wrapped inside the @SpringBootApplication annotation.
	  
	  @SpringBootApplication=@ComponentScan+@EnableAutoConfiguration+@Configuration
	  
**  E.g 2:- When we add the spring-boot-starter-web dependency in the project, Spring Boot auto-configuration looks
    for the Spring MVC is on the classpath. It auto-configures dispatcherServlet, a default error page, and web jars.

2. Need of auto-configuration:-
_______________________________________
** Spring-based application requires a lot of configuration.
** When we use Spring MVC, we need to configure dispatcher servlet, view resolver, web jars among other things. 

3  Disable Auto-configuration Classes:
__________________________________________
** We can also disable the specific auto-configuration classes, if we do not want to be applied.
** We use the exclude attribute of the annotation @EnableAutoConfiguration to disable the auto-configuration classes.