** SAGA Design Pattern **  https://microservices.io/patterns/data/saga.html
___________________________________
**  The Saga Pattern is as microservices architectural pattern to implement a transaction that spans multiple services.
 *  We can saya saga is a sequence of local transactions. Each service in a saga performs its own transaction 
    and publishes an event.
 
Q.  How to implement transactions that span services?
 *  Implement each business transaction that spans multiple services is a saga. A saga is a sequence of local transactions. 
 *  Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. 
 *  If a local transaction fails because it violates a business rule then the saga executes a series of
    compensating transactions that undo the changes that were made by the preceding local transactions. 
	
(2) **** ORCHESTRATION -based saga ****
 *  An e-commerce application that uses this approach would create an order using an orchestration-based saga 
    that consists of the some steps:	
 *	The Order Service receives the POST /orders request and creates the Create Order saga orchestrator
 *  The saga orchestrator creates an Order in the PENDING state
 *  It then sends a Reserve Credit command to the Customer Service
 *  The Customer Service attempts to reserve credit
 *  It then sends back a reply message indicating the outcome
 *  The saga orchestrator either approves or rejects the Order
 
**** Advantage of Saga ****
 *  It enables an application to maintain data consistency across multiple services without using distributed transactions.
 
 **** Disadvantage ****
 *  The programming model is more complex. For example, a developer must design compensating transactions that
    explicitly undo changes made earlier in a saga.
	